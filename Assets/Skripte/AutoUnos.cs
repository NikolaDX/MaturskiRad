//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Skripte/AutoUnos.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AutoUnos : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AutoUnos()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AutoUnos"",
    ""maps"": [
        {
            ""name"": ""Auto"",
            ""id"": ""38cdf8ee-75d8-40c9-a05d-e7c48f80e1c8"",
            ""actions"": [
                {
                    ""name"": ""HorizontalnoKretanje"",
                    ""type"": ""Value"",
                    ""id"": ""1dd5ca27-02a6-43d3-992d-00b9bc478e54"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Povratak"",
                    ""type"": ""Button"",
                    ""id"": ""ccdfcaed-1eb0-420e-a8a8-2563df7f8405"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VertikalnoKretanje"",
                    ""type"": ""Value"",
                    ""id"": ""7ee72137-3cec-4464-b9b3-50f0cfcead3a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""348042b4-8ffd-4b99-b6dd-eb7dc5588808"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Povratak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daa79613-70f8-43aa-b447-85e3f9200713"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Povratak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""acb5084b-3e42-467c-914e-1a10681592d1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""428a49bd-af84-4cba-adda-253bda4fd4cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""17fbf1e6-c499-453f-8bfb-528cd1c36785"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Strelice"",
                    ""id"": ""5ccd0048-f971-4cf8-9d57-f171f5c995f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4b78fbc7-aabd-4695-9d8a-d6de6695c826"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b2e2f4a2-11f1-47ac-b785-a7aba54a77fd"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Analog"",
                    ""id"": ""e443d243-3b95-498f-a7ed-2c3e7958c3ca"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e11bec7e-29f0-47af-8593-f0add87aa4a7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d06954c3-1e14-4e94-b7ee-7e8180fb8436"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""9506cb80-b805-4c3e-9446-5e6b34b0c86f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9df4aebc-1d41-4812-8239-c125fe4c7408"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""689c4ae5-6193-4359-bdb3-b0c1ce6aae32"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Strelice"",
                    ""id"": ""a5ef6ed4-95a6-4bd7-bd93-1279b9bc89b9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bc516e25-6612-4b1e-9f79-e55518364349"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9edfc137-dcd6-43c7-b345-1bea9d911a5a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Analog"",
                    ""id"": ""1d0b8a4b-12ff-44c0-bc21-75a874e1847d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""98483e4f-a312-42bc-8a20-5e1186dbf239"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""29a83752-21a0-4076-adc1-8ce1b5c9dd51"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertikalnoKretanje"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Auto
        m_Auto = asset.FindActionMap("Auto", throwIfNotFound: true);
        m_Auto_HorizontalnoKretanje = m_Auto.FindAction("HorizontalnoKretanje", throwIfNotFound: true);
        m_Auto_Povratak = m_Auto.FindAction("Povratak", throwIfNotFound: true);
        m_Auto_VertikalnoKretanje = m_Auto.FindAction("VertikalnoKretanje", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Auto
    private readonly InputActionMap m_Auto;
    private IAutoActions m_AutoActionsCallbackInterface;
    private readonly InputAction m_Auto_HorizontalnoKretanje;
    private readonly InputAction m_Auto_Povratak;
    private readonly InputAction m_Auto_VertikalnoKretanje;
    public struct AutoActions
    {
        private @AutoUnos m_Wrapper;
        public AutoActions(@AutoUnos wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalnoKretanje => m_Wrapper.m_Auto_HorizontalnoKretanje;
        public InputAction @Povratak => m_Wrapper.m_Auto_Povratak;
        public InputAction @VertikalnoKretanje => m_Wrapper.m_Auto_VertikalnoKretanje;
        public InputActionMap Get() { return m_Wrapper.m_Auto; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AutoActions set) { return set.Get(); }
        public void SetCallbacks(IAutoActions instance)
        {
            if (m_Wrapper.m_AutoActionsCallbackInterface != null)
            {
                @HorizontalnoKretanje.started -= m_Wrapper.m_AutoActionsCallbackInterface.OnHorizontalnoKretanje;
                @HorizontalnoKretanje.performed -= m_Wrapper.m_AutoActionsCallbackInterface.OnHorizontalnoKretanje;
                @HorizontalnoKretanje.canceled -= m_Wrapper.m_AutoActionsCallbackInterface.OnHorizontalnoKretanje;
                @Povratak.started -= m_Wrapper.m_AutoActionsCallbackInterface.OnPovratak;
                @Povratak.performed -= m_Wrapper.m_AutoActionsCallbackInterface.OnPovratak;
                @Povratak.canceled -= m_Wrapper.m_AutoActionsCallbackInterface.OnPovratak;
                @VertikalnoKretanje.started -= m_Wrapper.m_AutoActionsCallbackInterface.OnVertikalnoKretanje;
                @VertikalnoKretanje.performed -= m_Wrapper.m_AutoActionsCallbackInterface.OnVertikalnoKretanje;
                @VertikalnoKretanje.canceled -= m_Wrapper.m_AutoActionsCallbackInterface.OnVertikalnoKretanje;
            }
            m_Wrapper.m_AutoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalnoKretanje.started += instance.OnHorizontalnoKretanje;
                @HorizontalnoKretanje.performed += instance.OnHorizontalnoKretanje;
                @HorizontalnoKretanje.canceled += instance.OnHorizontalnoKretanje;
                @Povratak.started += instance.OnPovratak;
                @Povratak.performed += instance.OnPovratak;
                @Povratak.canceled += instance.OnPovratak;
                @VertikalnoKretanje.started += instance.OnVertikalnoKretanje;
                @VertikalnoKretanje.performed += instance.OnVertikalnoKretanje;
                @VertikalnoKretanje.canceled += instance.OnVertikalnoKretanje;
            }
        }
    }
    public AutoActions @Auto => new AutoActions(this);
    public interface IAutoActions
    {
        void OnHorizontalnoKretanje(InputAction.CallbackContext context);
        void OnPovratak(InputAction.CallbackContext context);
        void OnVertikalnoKretanje(InputAction.CallbackContext context);
    }
}
